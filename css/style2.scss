$font-stack: Arial, Helvetica, sans-serif;
$light-color: #f4f4f4;
$primary-color: #0e6cff;
// $primary-color: #abcdef;
$secondary-color: #ff8700;

// Sass function to set the color of text based on color of the background
// by using conditionals
@function set-text-color($color) {
    @if (lightness($color) > 70) {
        @return #333;
    }
    @else {
        @return #eee;
    }
}

// Mixin to est text clr and bh clr
@mixin set-background($color) {
    background-color: $color;
    color: set-text-color($color);
}

// Sass Each loops
// setting margin and padding
$spaceamount: (1, 2, 3, 4, 5);

@each $space in $spaceamount {
    .m-#{$space} {
        margin: #{$space}rem;
    }

    .my-#{$space} {
        margin: #{$space}rem 0;
    }

    .p-#{$space} {
        padding: #{$space}rem;
    }

    .py-#{$space} {
        padding: #{$space}rem 0;
    }
}

* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    background-color: $light-color;
    font-family: $font-stack;
    line-height: 1.4;
}

img {
    width: 100%;
}

a {
    text-decoration: none;
}

.showcase {
    background-color: $primary-color;
    height: 45rem;
    // color: #fff;
    // color: set-text-color($primary-color);
    @include set-background($primary-color);

    nav {
        display: flex;
        justify-content: space-between;
        align-items: center;

        ul {
            list-style-type: none;
            display: flex;

            li {
                padding: 1rem;
            }

            a:hover {
                color: $secondary-color;
            }
        }
    }

    a {
        // color: #fff;
        color: set-text-color($primary-color);
    }

    &-content {
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 5rem;

        img {
            width: 50%;
        }

        h1 {
            font-size: 3rem;
            line-height: 1.2;
        }

        p {
            padding: 1.5rem 0;
        }
    }
}

// we are not nesting .container class inside .showcase header
// because we might want to use it somewhere else like a utility class
.container {
    overflow: auto;
    max-width: 70rem;
    margin: 0 auto;
    padding: 0 2rem;
}

.btn {
    display: inline-block;
    border-radius: .25rem;
    padding: .5rem 1.5rem;
    margin: .25rem;

    &:hover {
        transform: scale(.98);
    }
}

.btn-primary {
    @extend .btn;
    // background-color: lighten($primary-color, 15%);
    @include set-background(lighten($primary-color, 15%));
}
.btn-secondary {
    @extend .btn;
    // background-color: $secondary-color;
    @include set-background($secondary-color);
}

@media (max-width: 700px) {
    .showcase {
        height: 35rem;

        &-content {
            text-align: center;
    
            img {
                display: none;
            }
        }
    }
}